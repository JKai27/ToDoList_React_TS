var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import Axios from "axios";
import ObjectHash from "object-hash";
import { ResourceStore } from "./resourcestore";
var ResourceService = /** @class */ (function () {
    function ResourceService() {
    }
    ResourceService.buildKey = function (script, context) {
        return "".concat(this.key, ":").concat(ObjectHash.sha1({ context: context, script: script }));
    };
    ResourceService.loadResourceBundle = function (resourceBundleName, shopUrl, locale, released) {
        return Axios.get("".concat(this.getResourceDelivererEndpoint(released)).concat(shopUrl, "_").concat(locale, "_").concat(resourceBundleName, ".json"));
    };
    ResourceService.getResourceDelivererEndpoint = function (released) {
        return ((released && "https://manager.marcapo.com/resourcedeliverer/") ||
            "https://manager.marcapointegration.com/resourcedeliverer/");
    };
    ResourceService.loadResourceBundleWithFallback = function (resourceBundleName, shopUrl, locale, released) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this.loadResourceBundle(resourceBundleName, shopUrl, locale, released)
                .then(function (response) { return resolve(response.data); })
                .catch(function (error) {
                if (shopUrl && shopUrl !== "default") {
                    _this.loadResourceBundle(resourceBundleName, "default", locale, released)
                        .then(function (response) { return resolve(response.data); })
                        .catch(function (loadError) { return reject(loadError); });
                }
                else {
                    reject(error);
                }
            });
        });
    };
    ResourceService.loadOrGetResourceBundleFromCache = function (resourceBundleName, shopUrl, locale, released) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var bundleFromCache = null;
            bundleFromCache = sessionStorage.getItem("".concat(resourceBundleName, ":").concat(shopUrl, ":").concat(locale, ":").concat(released));
            if (!bundleFromCache) {
                _this.loadResourceBundleWithFallback(resourceBundleName, shopUrl, locale, released)
                    .then(function (resourceBundle) {
                    sessionStorage.setItem("".concat(resourceBundleName, ":").concat(shopUrl, ":").concat(locale, ":").concat(released), JSON.stringify(resourceBundle));
                    resolve(resourceBundle);
                })
                    .catch(function (error) { return reject(error); });
            }
            else {
                try {
                    resolve(JSON.parse(bundleFromCache));
                }
                catch (error) {
                    reject(error);
                }
            }
        });
    };
    ResourceService.resolveText = function (resourceText, context) {
        return __awaiter(this, void 0, void 0, function () {
            var result, cachedResult, resolvedRequest;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        result = resourceText;
                        if (!(resourceText && context && resourceText.includes("$"))) return [3 /*break*/, 2];
                        cachedResult = sessionStorage.getItem(this.buildKey(resourceText, context));
                        if (cachedResult !== null) {
                            return [2 /*return*/, cachedResult];
                        }
                        this.activeRequests.add(this.buildKey(resourceText, context));
                        return [4 /*yield*/, ResourceStore.restClient.post("/velocitycachegatewayservice/resolve", {
                                script: resourceText,
                                context: context,
                            })];
                    case 1:
                        resolvedRequest = _a.sent();
                        if (resolvedRequest.data) {
                            result = resolvedRequest.data;
                            sessionStorage.setItem(this.buildKey(resourceText, context), result);
                        }
                        this.activeRequests.delete(this.buildKey(resourceText, context));
                        _a.label = 2;
                    case 2: return [2 /*return*/, result];
                }
            });
        });
    };
    ResourceService.get = function (resourceKey, context, doNotResolve, shopUrlOverride, localeOverride) {
        if (context === void 0) { context = {}; }
        if (doNotResolve === void 0) { doNotResolve = false; }
        return __awaiter(this, void 0, void 0, function () {
            var result, _a, shopUrl, locale, liveResource, resourceBundleName, resourceBundle, error_1;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        result = "";
                        _a = ResourceStore.getResourceBundleParamsFromModuleSession(), shopUrl = _a.shopUrl, locale = _a.locale, liveResource = _a.liveResource;
                        if (shopUrlOverride) {
                            shopUrl = shopUrlOverride;
                        }
                        else if (localeOverride) {
                            locale = localeOverride;
                        }
                        if (!resourceKey.includes(".")) return [3 /*break*/, 6];
                        resourceBundleName = resourceKey.split(".")[0];
                        resourceBundle = null;
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.loadOrGetResourceBundleFromCache(resourceBundleName, shopUrl, locale, liveResource)];
                    case 2:
                        resourceBundle = _b.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        error_1 = _b.sent();
                        console.log(error_1);
                        result = resourceKey;
                        return [3 /*break*/, 4];
                    case 4:
                        if (resourceBundle) {
                            result = resourceBundle[resourceKey];
                        }
                        if (!(!doNotResolve && result && typeof result === "string")) return [3 /*break*/, 6];
                        return [4 /*yield*/, this.resolveText(result, context)];
                    case 5:
                        result = _b.sent();
                        _b.label = 6;
                    case 6: return [2 /*return*/, result];
                }
            });
        });
    };
    ResourceService.key = "velocitycache";
    ResourceService.activeRequests = new Set();
    return ResourceService;
}());
export { ResourceService };
