var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React, { useState, useEffect } from "react";
import { ResourceService } from "./resourceservice";
var compareObject = function (currentProbs, nextProbs) {
    return JSON.stringify(currentProbs) === JSON.stringify(nextProbs);
};
export var ResourceText = React.memo(function (props) {
    var resourceKey = props.resourceKey, context = props.context, rest = __rest(props, ["resourceKey", "context"]);
    var _a = useState(resourceKey), text = _a[0], setText = _a[1];
    var loadingStyle = { color: "transparent", textShadow: "0 0 5px rgba(0,0,0,0.5)" };
    var loadResourceKey = function (resourceKeyParam, contextParam) {
        resourceKeyParam = resourceKeyParam.toLowerCase();
        ResourceService.get(resourceKeyParam, contextParam, false, window.shopUrl, window.locale)
            .then(function (textResolved) {
            if (textResolved) {
                setText(textResolved);
            }
        })
            .catch(function (error) { return console.error(error); });
    };
    useEffect(function () {
        if (!ResourceService.activeRequests.has(ResourceService.buildKey(resourceKey, context || {}))) {
            loadResourceKey(resourceKey, context);
        }
    }, [resourceKey, JSON.stringify(context)]);
    return (React.createElement("span", __assign({}, rest, { id: resourceKey, "data-cy": resourceKey, dangerouslySetInnerHTML: { __html: text }, style: Object.assign(text === resourceKey ? loadingStyle : {}, props.style || {}) })));
}, compareObject);
