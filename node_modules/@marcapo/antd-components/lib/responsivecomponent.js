import { Fragment as _Fragment, jsx as _jsx } from "react/jsx-runtime";
import { observer } from "mobx-react-lite";
import { ResponsiveStore } from ".";
export var ResponsiveComponent = observer(function (props) {
    var hideOnSize = props.hideOnSize, showOnSize = props.showOnSize, hideUnder = props.hideUnder, hideOver = props.hideOver, showUnder = props.showUnder, showOver = props.showOver, equal = props.equal;
    var showChildren = true;
    var currentSize = ResponsiveStore.getCurrentSize();
    if (hideOnSize) {
        hideOnSize.forEach(function (size) {
            if (size === currentSize) {
                showChildren = false;
            }
        });
    }
    if (showOnSize) {
        showChildren = false;
        showOnSize.forEach(function (size) {
            if (size === currentSize) {
                showChildren = true;
            }
        });
    }
    if (showUnder && showOver) {
        showChildren = ResponsiveStore.isUnder(showUnder, equal) || ResponsiveStore.isOver(showOver, equal);
    }
    else if (hideUnder && hideOver) {
        showChildren = !(ResponsiveStore.isUnder(hideUnder, equal) || ResponsiveStore.isOver(hideOver, equal));
    }
    else {
        if (hideUnder) {
            showChildren = !ResponsiveStore.isUnder(hideUnder, equal);
        }
        if (hideOver) {
            showChildren = !ResponsiveStore.isOver(hideOver, equal);
        }
        if (showUnder) {
            showChildren = ResponsiveStore.isUnder(showUnder, equal);
        }
        if (showOver) {
            showChildren = ResponsiveStore.isOver(showOver, equal);
        }
    }
    if (showChildren) {
        return _jsx(_Fragment, { children: props.children });
    }
    return null;
});
//# sourceMappingURL=responsivecomponent.js.map