var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { jsx as _jsx } from "react/jsx-runtime";
var generateClassName = function (classNameProps) {
    var type = classNameProps.type, className = classNameProps.className, spin = classNameProps.spin, rotate = classNameProps.rotate;
    var classNameTemplate = "anticon anticon-".concat(type);
    if (className) {
        classNameTemplate += " ".concat(className);
    }
    if (spin) {
        classNameTemplate += " anticon-spin";
    }
    if (rotate) {
        if (rotate === "90" || rotate === "180" || rotate === "270") {
            classNameTemplate += " anticon-rotate-".concat(rotate);
        }
        else if (rotate === "horizontal" || rotate === "vertical") {
            classNameTemplate += " anticon-flip-".concat(rotate);
        }
    }
    return classNameTemplate;
};
export var Icon = function (props) {
    var type = props.type, className = props.className, spin = props.spin, rotate = props.rotate, style = props.style, rest = __rest(props, ["type", "className", "spin", "rotate", "style"]);
    var classNameProps = {
        className: className,
        type: type,
        spin: spin,
        rotate: rotate,
    };
    return _jsx("span", __assign({ role: "img" }, rest, { className: generateClassName(classNameProps), style: style }));
};
//# sourceMappingURL=icon.js.map