import { observable, makeObservable, runInAction } from "mobx";
import { StyleStore } from "./stylestore";
var ResponsiveStoreInstance = /** @class */ (function () {
    function ResponsiveStoreInstance() {
        this.windowSize = 1200;
        this.windowSizeXs = 480;
        this.windowSizeSm = 576;
        this.windowSizeMd = 768;
        this.windowSizeLg = 992;
        this.windowSizeXl = 1200;
        this.windowSizeXxl = 1600;
        this.sizeTypes = [];
        this.initialized = false;
        makeObservable(this, {
            windowSize: observable,
        });
    }
    ResponsiveStoreInstance.prototype.is = function (size) {
        return this.getCurrentSize() === size;
    };
    ResponsiveStoreInstance.prototype.isXs = function () {
        return this.is("xs");
    };
    ResponsiveStoreInstance.prototype.isSm = function () {
        return this.is("sm");
    };
    ResponsiveStoreInstance.prototype.isMd = function () {
        return this.is("md");
    };
    ResponsiveStoreInstance.prototype.isLg = function () {
        return this.is("lg");
    };
    ResponsiveStoreInstance.prototype.isXl = function () {
        return this.is("xl");
    };
    ResponsiveStoreInstance.prototype.isXxl = function () {
        return this.is("xxl");
    };
    ResponsiveStoreInstance.prototype.isOver = function (size, equal) {
        var isOverValue;
        if (equal) {
            isOverValue = this.sizeTypes.indexOf(this.getCurrentSize()) >= this.sizeTypes.indexOf(size);
        }
        else {
            isOverValue = this.sizeTypes.indexOf(this.getCurrentSize()) > this.sizeTypes.indexOf(size);
        }
        return isOverValue;
    };
    ResponsiveStoreInstance.prototype.isUnder = function (size, equal) {
        return !this.isOver(size, !equal);
    };
    ResponsiveStoreInstance.prototype.getCurrentSize = function () {
        if (!this.initialized) {
            this.initResponsiveHelper();
        }
        var currentSize;
        var currentSizeType = "xs";
        if (this.windowSize >= this.windowSizeSm) {
            currentSizeType = "sm";
        }
        if (this.windowSize >= this.windowSizeMd) {
            currentSizeType = "md";
        }
        if (this.windowSize >= this.windowSizeLg) {
            currentSizeType = "lg";
        }
        if (this.windowSize >= this.windowSizeXl) {
            currentSizeType = "xl";
        }
        if (this.windowSize >= this.windowSizeXxl) {
            currentSizeType = "xxl";
        }
        currentSize = this.sizeTypes.find(function (sizeTypeTmp) { return sizeTypeTmp === currentSizeType; });
        if (!currentSize) {
            currentSize = this.sizeTypes[3];
        }
        return currentSize;
    };
    ResponsiveStoreInstance.prototype.initResponsiveHelper = function () {
        var _this = this;
        window.addEventListener("resize", function () {
            runInAction(function () { return (_this.windowSize = window.innerWidth); });
        });
        this.windowSize = window.innerWidth;
        this.sizeTypes.push("xs");
        this.sizeTypes.push("sm");
        this.sizeTypes.push("md");
        this.sizeTypes.push("lg");
        this.sizeTypes.push("xl");
        this.sizeTypes.push("xxl");
        try {
            this.windowSizeXs = parseInt(StyleStore.getStyleValueByCssClassName("breakpoint-xs", "width").replace("px", ""), 10);
            this.windowSizeSm = parseInt(StyleStore.getStyleValueByCssClassName("breakpoint-sm", "width").replace("px", ""), 10);
            this.windowSizeMd = parseInt(StyleStore.getStyleValueByCssClassName("breakpoint-md", "width").replace("px", ""), 10);
            this.windowSizeLg = parseInt(StyleStore.getStyleValueByCssClassName("breakpoint-lg", "width").replace("px", ""), 10);
            this.windowSizeXl = parseInt(StyleStore.getStyleValueByCssClassName("breakpoint-xl", "width").replace("px", ""), 10);
            this.windowSizeXxl = parseInt(StyleStore.getStyleValueByCssClassName("breakpoint-xxl", "width").replace("px", ""), 10);
        }
        catch (e) {
            console.log(e);
        }
        this.initialized = true;
    };
    return ResponsiveStoreInstance;
}());
export var ResponsiveStore = new ResponsiveStoreInstance();
//# sourceMappingURL=responsivestore.js.map