import { observable, makeObservable, runInAction } from "mobx";
import { StyleStore } from "./stylestore";

export type Size = "xs" | "sm" | "md" | "lg" | "xl" | "xxl";

class ResponsiveStoreInstance {
	public windowSize: number = 1200;
	public windowSizeXs: number = 480;
	private windowSizeSm: number = 576;
	private windowSizeMd: number = 768;
	private windowSizeLg: number = 992;
	private windowSizeXl: number = 1200;
	private windowSizeXxl: number = 1600;

	private sizeTypes: string[] = [];

	private initialized: boolean = false;

	constructor() {
		makeObservable(this, {
			windowSize: observable,
		});
	}

	public is(size: string): boolean {
		return this.getCurrentSize() === size;
	}

	public isXs(): boolean {
		return this.is("xs");
	}

	public isSm(): boolean {
		return this.is("sm");
	}

	public isMd(): boolean {
		return this.is("md");
	}

	public isLg(): boolean {
		return this.is("lg");
	}

	public isXl(): boolean {
		return this.is("xl");
	}

	public isXxl(): boolean {
		return this.is("xxl");
	}

	public isOver(size: Size, equal?: boolean): boolean {
		let isOverValue;
		if (equal) {
			isOverValue = this.sizeTypes.indexOf(this.getCurrentSize()) >= this.sizeTypes.indexOf(size);
		} else {
			isOverValue = this.sizeTypes.indexOf(this.getCurrentSize()) > this.sizeTypes.indexOf(size);
		}
		return isOverValue;
	}

	public isUnder(size: Size, equal?: boolean): boolean {
		return !this.isOver(size, !equal);
	}

	public getCurrentSize(): string {
		if (!this.initialized) {
			this.initResponsiveHelper();
		}

		let currentSize;
		let currentSizeType = "xs";

		if (this.windowSize >= this.windowSizeSm) {
			currentSizeType = "sm";
		}
		if (this.windowSize >= this.windowSizeMd) {
			currentSizeType = "md";
		}
		if (this.windowSize >= this.windowSizeLg) {
			currentSizeType = "lg";
		}
		if (this.windowSize >= this.windowSizeXl) {
			currentSizeType = "xl";
		}
		if (this.windowSize >= this.windowSizeXxl) {
			currentSizeType = "xxl";
		}
		currentSize = this.sizeTypes.find(sizeTypeTmp => sizeTypeTmp === currentSizeType);
		if (!currentSize) {
			currentSize = this.sizeTypes[3];
		}
		return currentSize;
	}

	private initResponsiveHelper(): void {
		window.addEventListener("resize", () => {
			runInAction(() => (this.windowSize = window.innerWidth));
		});
		this.windowSize = window.innerWidth;

		this.sizeTypes.push("xs");
		this.sizeTypes.push("sm");
		this.sizeTypes.push("md");
		this.sizeTypes.push("lg");
		this.sizeTypes.push("xl");
		this.sizeTypes.push("xxl");

		try {
			this.windowSizeXs = parseInt(
				StyleStore.getStyleValueByCssClassName("breakpoint-xs", "width").replace("px", ""),
				10
			);

			this.windowSizeSm = parseInt(
				StyleStore.getStyleValueByCssClassName("breakpoint-sm", "width").replace("px", ""),
				10
			);
			this.windowSizeMd = parseInt(
				StyleStore.getStyleValueByCssClassName("breakpoint-md", "width").replace("px", ""),
				10
			);
			this.windowSizeLg = parseInt(
				StyleStore.getStyleValueByCssClassName("breakpoint-lg", "width").replace("px", ""),
				10
			);
			this.windowSizeXl = parseInt(
				StyleStore.getStyleValueByCssClassName("breakpoint-xl", "width").replace("px", ""),
				10
			);
			this.windowSizeXxl = parseInt(
				StyleStore.getStyleValueByCssClassName("breakpoint-xxl", "width").replace("px", ""),
				10
			);
		} catch (e) {
			console.log(e);
		}

		this.initialized = true;
	}
}

export const ResponsiveStore = new ResponsiveStoreInstance();
