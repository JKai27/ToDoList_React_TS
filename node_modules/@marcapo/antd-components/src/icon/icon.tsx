import React, { CSSProperties } from "react";
import { FontAwsomeType } from "./fontawsometypes";

type FontAwsomeRotation = "90" | "180" | "270" | "horizontal" | "vertical";

export interface IConProps extends IClassNameProps {
	style?: CSSProperties;
}
interface IClassNameProps extends React.HTMLAttributes<HTMLSpanElement> {
	type: FontAwsomeType;
	className?: string;
	spin?: boolean;
	rotate?: FontAwsomeRotation;
}

const generateClassName = (classNameProps: IClassNameProps): string => {
	const { type, className, spin, rotate } = classNameProps;
	let classNameTemplate = `anticon anticon-${type}`;
	if (className) {
		classNameTemplate += ` ${className}`;
	}
	if (spin) {
		classNameTemplate += ` anticon-spin`;
	}
	if (rotate) {
		if (rotate === "90" || rotate === "180" || rotate === "270") {
			classNameTemplate += ` anticon-rotate-${rotate}`;
		} else if (rotate === "horizontal" || rotate === "vertical") {
			classNameTemplate += ` anticon-flip-${rotate}`;
		}
	}
	return classNameTemplate;
};

export const Icon = (props: IConProps): JSX.Element => {
	const { type, className, spin, rotate, style, ...rest } = props;
	const classNameProps: IClassNameProps = {
		className,
		type,
		spin,
		rotate,
	};
	return <span role="img" {...rest} className={generateClassName(classNameProps)} style={style} />;
};
