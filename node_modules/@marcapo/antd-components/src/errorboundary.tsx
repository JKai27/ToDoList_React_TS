import React, { ErrorInfo, ReactNode } from "react";
interface IErrorBoundary {
	forwardToModuleError?: boolean;
	fallback?: ReactNode;
	children?: ReactNode;
}
interface IState {
	hasError: boolean;
	stack?: string;
	error?: string;
	fallback: ReactNode;
}

export class ErrorBoundary extends React.Component<IErrorBoundary> {
	public state: IState;

	constructor(props: IErrorBoundary) {
		super(props);
		this.state = {
			hasError: false,
			fallback: props.fallback ?? <div>⚠️</div>,
		};
	}
	public static getDerivedStateFromError(): Partial<IState> {
		return { hasError: true };
	}

	public render(): ReactNode {
		if (this.state.hasError) {
			return this.state.fallback;
		}

		return this.props.children;
	}

	public componentDidCatch(error: Error, errorInfo: ErrorInfo): void {
		if (this.props.forwardToModuleError) {
			let stack = "";
			if (typeof errorInfo.componentStack === "string") {
				stack = btoa(errorInfo.componentStack);
			}
			const info = btoa(error.name);
			window.location.href = `${window.location.origin}/marcapo_platform/ModuleError.do?moduleErrorInfo=${info}&stack=${stack}`;
		}
		console.log(`Error: ${error}`);
	}
}
