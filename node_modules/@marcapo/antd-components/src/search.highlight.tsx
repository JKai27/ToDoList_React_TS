import React, { FC } from "react";
interface IHighlightSearch extends React.DetailedHTMLProps<React.HTMLAttributes<HTMLSpanElement>, HTMLSpanElement> {
	value: string;
	search: string;
	hitLength?: number;
	parent?: [`<${string}>`, `</${string}>`];
}
export const HighlightSearch: FC<IHighlightSearch> = props => {
	// eslint-disable-next-line prefer-const
	let { hitLength, search, value, parent = ['<span class="color-primary">', "</span>"], ...rest } = props;
	if (!hitLength) {
		hitLength = 3;
	}
	if (search.length >= hitLength) {
		if (search && parent[0] && parent[1]) {
			const pattern = new RegExp(search, "gmi");
			const matches = value.match(pattern);
			if (matches) {
				if (matches?.[0]) {
					for (const match of matches) {
						value = value.replace(match, "#");
					}
				}
				const splittedValues = value.split("#");
				const spans: string[] = [];
				splittedValues.forEach((entry, index) => {
					if (index < splittedValues.length - 1) {
						spans.push(`${entry}${parent[0]}${matches[index]}${parent[1]}`);
					} else {
						spans.push(entry);
					}
				});
				value = spans.join("");
			}
		}
	}
	return <span {...rest} dangerouslySetInnerHTML={{ __html: value }} />;
};
