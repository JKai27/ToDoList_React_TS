const fs = require("fs");
const appPath = "../../..";
const appPackageJson = require(`${appPath}/package.json`);
const configPath = ".eslintrc.cjs"

appPackageJson.scripts.lint = `tsc && eslint --quiet -c ${configPath} --ext '.js, .jsx, .ts, .tsx' ./src`;
appPackageJson.scripts.fixLint = `tsc && eslint --fix --quiet -c ${configPath} --ext '.js, .jsx, .ts, .tsx' ./src`;

if (appPackageJson.devDependencies.typescript) {
	delete appPackageJson.devDependencies.typescript;
}
if (appPackageJson.dependencies.typescript) {
	delete appPackageJson.dependencies.typescript;
}
switch(appPackageJson.description) {
	
	case "feathers-service-ts-kubernetes":
	fs.copyFileSync(`./templates/backend${configPath}`, `${appPath}/${configPath}`);
	break;
	default:
	fs.copyFileSync(`./templates/frontend${configPath}`, `${appPath}/${configPath}`);
}

fs.copyFileSync(`./templates/.prettierrc`, `${appPath}/.prettierrc`);

const stringify = (obj, { EOL = '\n', finalEOL = true, replacer = null, spaces } = {}) => {
	const EOF = finalEOL ? EOL : ''
	const str = JSON.stringify(obj, replacer, spaces)
	return str.replace(/\n/g, EOL) + EOF
};

const writeJsonSync = (file, obj, options = {}) => {
	const jsonString = stringify(obj, options);
	return fs.writeFileSync(file, jsonString, options)
}

writeJsonSync(`${appPath}/package.json`, appPackageJson, {spaces:2});