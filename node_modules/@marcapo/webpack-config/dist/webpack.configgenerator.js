"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateWebpackConfig = void 0;
const path_1 = __importDefault(require("path"));
const webpack_1 = __importDefault(require("webpack"));
const fork_ts_checker_webpack_plugin_1 = __importDefault(require("fork-ts-checker-webpack-plugin"));
const react_refresh_webpack_plugin_1 = __importDefault(require("@pmmmwh/react-refresh-webpack-plugin"));
const mini_css_extract_plugin_1 = __importDefault(require("mini-css-extract-plugin"));
const webpack_devserver_1 = require("./webpack.devserver");
const webpack_helper_1 = require("./webpack.helper");
const generateWebpackConfig = ({ packageJson, packageLock, containingDirPath, entryFilePath, mfeConfig, proxys, tempDevFix, defaultRemotes = [], }) => {
    const { name, dependencies, version } = packageJson;
    const { remotes, exposes, outputPath, customPort, customPlugins, customConfig } = mfeConfig;
    const combinedRemotes = remotes.concat(defaultRemotes);
    if (!dependencies) {
        throw new Error("Dependency property missing in package.json");
    }
    const sharedDependencies = (0, webpack_helper_1.extractDependenciesWithoutRemotes)({ dependencies, remotes: combinedRemotes });
    const { ModuleFederationPlugin } = webpack_1.default.container;
    require("dotenv").config({ path: "./.env" });
    let newName = "";
    if (name.includes("@")) {
        newName = name.split("@marcapo/")[1];
    }
    const parsedMfeConfig = (0, webpack_helper_1.parseMfeConfigJson)({ remotes: combinedRemotes, exposes }, packageLock, packageJson);
    console.log(webpack_helper_1.parseMfeConfigJson);
    const ModuleFederationConfig = new ModuleFederationPlugin({
        ...parsedMfeConfig,
        shared: {
            ...sharedDependencies,
            antd: {
                singleton: true,
            },
            "@marcapo/resource-components": {},
            mobx: {
                singleton: true,
                eager: true,
                requiredVersion: dependencies.mobx,
            },
            "mobx-react-lite": {
                singleton: true,
                eager: true,
                requiredVersion: dependencies["mobx-react-lite"],
            },
            react: tempDevFix ? { eager: true } : { singleton: true, eager: true, requiredVersion: dependencies.react },
            "react-dom": tempDevFix
                ? { eager: true }
                : {
                    singleton: true,
                    eager: true,
                    requiredVersion: dependencies["react-dom"],
                },
            "react-router-dom": {
                singleton: true,
                requiredVersion: dependencies["react-router-dom"],
            },
        },
    });
    const webpackConfig = {
        ...customConfig,
        output: {
            uniqueName: `${newName}:${version}`,
            chunkFilename: `${version}_[chunkhash].js`,
        },
        entry: path_1.default.join(containingDirPath, entryFilePath),
        mode: process.env.NODE_ENV || "development",
        devtool: "eval-source-map",
        devServer: {
            ...(0, webpack_devserver_1.generateDevServer)({
                name,
                remotes: (0, webpack_helper_1.getRemoteDependenciesWithVersion)({ dependencies, remotes }),
                proxys,
                customPort,
            }),
            hot: true,
        },
        resolve: {
            extensions: [".ts", ".tsx", ".js"],
            fallback: {
                path: require.resolve("path-browserify"),
                fs: false,
            },
            alias: {
                react: path_1.default.resolve(containingDirPath, "node_modules/react"),
                React: path_1.default.resolve(containingDirPath, "node_modules/react"),
            },
        },
        module: {
            rules: [
                {
                    test: /\.module\.css$/,
                    use: [
                        "style-loader",
                        {
                            loader: "css-loader",
                            options: {
                                modules: {
                                    localIdentName: `[local]__${newName}`,
                                },
                                importLoaders: 1,
                            },
                        },
                    ],
                    exclude: /node_modules/,
                },
                {
                    test: /\.css$/i,
                    use: [mini_css_extract_plugin_1.default.loader, "css-loader"],
                },
                // {
                // 	test: /^(?!.*\.module\.css$).*\.css$/,
                // 	use: ["style-loader", "css-loader"],
                // },
                {
                    test: /\.(woff|woff2|eot|ttf|otf)$/i,
                    type: "asset/resource",
                },
                {
                    test: /\.(js|jsx|tsx|ts)$/,
                    loader: "ts-loader",
                    exclude: /node_modules/,
                },
                {
                    test: /\.(js|jsx|tsx|ts)$/,
                    loader: "babel-loader",
                    exclude: /\.\/node_modules(\/@marcapo\/cra-module-root\/node_modules)?\/antd\/[a-z]{2}\/locale\/[a-z]{2}_[A-Z]{2}\.d\.ts/,
                    options: {
                        cacheDirectory: true,
                        babelrc: false,
                        presets: [
                            ["@babel/preset-env", { targets: { browsers: "last 2 versions" } }],
                            "@babel/preset-typescript",
                            [
                                "@babel/preset-react",
                                {
                                    runtime: "automatic",
                                },
                            ],
                        ],
                    },
                },
            ],
        },
        watchOptions: {
            ignored: /node_modules(?!\/@marcapo)/,
        },
        plugins: [
            new mini_css_extract_plugin_1.default(),
            new webpack_1.default.DefinePlugin({
                "process.env": JSON.stringify(process.env),
            }),
            new react_refresh_webpack_plugin_1.default({ overlay: false }),
            ModuleFederationConfig,
            new fork_ts_checker_webpack_plugin_1.default(),
        ],
    };
    if (outputPath) {
        Object.assign(webpackConfig.output, { path: outputPath });
    }
    if (customPlugins.length > 0) {
        webpackConfig.plugins = webpackConfig.plugins.concat(customPlugins);
    }
    return webpackConfig;
};
exports.generateWebpackConfig = generateWebpackConfig;
