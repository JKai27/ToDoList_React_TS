import { ModuleFederationPluginOptions } from "@module-federation/utilities";
import { PackageJson } from "types-package-json";
interface IMfeConfigJson {
    remotes: string[];
    exposes: Record<string, string>;
    customPlugins: any[];
    customPort?: string | number;
    customConfig?: any;
    outputPath?: string;
}
export interface IResolvedDependency {
    version: string;
    resolved: string;
    integrity: string;
    requires: Record<string, IResolvedDependency>;
}
interface IMfeProxyJson {
    path: string | RegExp;
    proxy: {
        target: string;
        pathRewrite?: Record<string, string>;
        changeOrigin?: boolean;
    };
}
type ParsedMFEConfig = Pick<ModuleFederationPluginOptions, "exposes" | "remotes" | "library" | "name" | "filename">;
declare const parseMfeConfigJson: (mfeConfigJson: {
    exposes: Record<string, string>;
    remotes: string[];
}, packageLock: any, packageJson: PackageJson) => ParsedMFEConfig;
declare const getRemoteDependenciesWithVersion: ({ dependencies, remotes, }: {
    dependencies: Record<string, string>;
    remotes: string[];
}) => {};
declare const extractDependenciesWithoutRemotes: ({ remotes, dependencies, }: {
    remotes: string[];
    dependencies: Record<string, string>;
}) => {};
export { ParsedMFEConfig, extractDependenciesWithoutRemotes, IMfeConfigJson, IMfeProxyJson, parseMfeConfigJson, getRemoteDependenciesWithVersion, };
