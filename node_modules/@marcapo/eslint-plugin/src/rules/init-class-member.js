module.exports = {
	meta: {
	  type: "problem",
	  docs: {
		description: "Require class members to be initialized either directly or in the constructor",
		category: "Best Practices",
		recommended: false
	  },
	  schema: [] // no options
	},
	create: function(context) {
	  return {
		ClassBody(node) {
		  const classProperties = new Set();
		  const initializedProperties = new Set();
  
		  node.body.forEach(element => {
			if (element.type === 'PropertyDefinition') {
			  classProperties.add(element.key.name);
			  if (element.value !== null) {
				initializedProperties.add(element.key.name);
			  }
			}
		  });
  
		  node.body.forEach(element => {
			if (element.type === 'MethodDefinition' && element.kind === 'constructor') {
			  element.value.body.body.forEach(stmt => {
				if (
				  stmt.type === 'ExpressionStatement' &&
				  stmt.expression.type === 'AssignmentExpression' &&
				  stmt.expression.left.type === 'MemberExpression' &&
				  stmt.expression.left.object.type === 'ThisExpression' &&
				  stmt.expression.left.property.type === 'Identifier'
				) {
				  initializedProperties.add(stmt.expression.left.property.name);
				}
			  });
			}
		  });
  
		  classProperties.forEach(property => {
			if (!initializedProperties.has(property)) {
			  context.report({
				node: node.body.find(element => element.key && element.key.name === property),
				message: "Class member '{{name}}' should be initialized.",
				data: {
				  name: property
				}
			  });
			}
		  });
		}
	  };
	}
  };
  